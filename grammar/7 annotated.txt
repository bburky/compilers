program
	→ PROGRAM ID LPAREN identifier_list RPAREN SEMICOLON program_2
check_add_procecure ID
pop locals and subprograms after done

program_2
	→ compound_statement PERIOD
	→ subprogram_declarations compound_statement PERIOD
	→ declarations program_3

program_3
	→ compound_statement PERIOD
	→ subprogram_declarations compound_statement PERIOD

identifier_list
	→ ID identifier_list_2
check_add_parameter ID to add to function parameters
type none?

identifier_list_2
	→ COMMA ID identifier_list_2
	→ EPSILON
check_add_parameter ID to add to function parameters

declarations
	→ VAR ID COLON type SEMICOLON declarations_2
check_add_id(id, type)

declarations_2
	→ VAR ID COLON type SEMICOLON declarations_2
	→ EPSILON
check_add_id(id, type)

type
	→ standard_type
	→ ARRAY LBRACKET NUM ARRAY_RANGE NUM RBRACKET OF standard_type
check that NUM and NUM are ints
return parse_standard_type(), ARRAY_INTEGER, ARRAY_REAL

standard_type
	→ INTEGER
	→ REAL
return type INTEGER or REAL

subprogram_declarations
	→ subprogram_declaration SEMICOLON subprogram_declarations_2

subprogram_declarations_2
	→ subprogram_declaration SEMICOLON subprogram_declarations_2
	→ EPSILON

subprogram_declaration
	→ subprogram_head subprogram_declaration_2
pop locals and subprograms after done

subprogram_declaration_2
	→ compound_statement
	→ declarations subprogram_declaration_3
	→ subprogram_declarations compound_statement

subprogram_declaration_3
	→ compound_statement
	→ subprogram_declarations compound_statement

subprogram_head
	→ PROCEDURE ID subprogram_head_2
check_add_procecure ID

subprogram_head_2
	→ arguments SEMICOLON
	→ SEMICOLON

arguments
	→ LPAREN parameter_list RPAREN

parameter_list
	→ identifier_list COLON type parameter_list_2
Find previously created parameters with NONE as type, set type on them
set_parameter_types()?

parameter_list_2
	→ SEMICOLON identifier_list COLON type parameter_list_2
	→ EPSILON
Find previously created parameters with NONE as type, set type on them
set_parameter_types()?

compound_statement
	→ BEGIN compound_statement_2

compound_statement_2
	→ optional_statements END
	→ END

optional_statements
	→ statement_list

statement_list
	→ statement statement_list_2

statement_list_2
	→ SEMICOLON statement statement_list_2
	→ EPSILON

statement
	→ variable ASSIGNOP expression
	→ procedure_statement
	→ compound_statement
	→ IF expression THEN statement statement_2
	→ WHILE expression DO statement
check that expression is BOOL in IF and WHILE
check that types of variable and expression match in ASSIGNOP (and expression is not ERROR..)

statement_2
	→ ELSE statement
	→ EPSILON

variable
	→ ID variable_2
check_id(id, false)
pass to variable_2

variable_2
	→ LBRACKET expression RBRACKET
	→ EPSILON
if LBRACKET, check that type of id passed in is ARRAY_*
check that expression is int?
return computed type

procedure_statement
	→ CALL ID procedure_statement_2
check_id(id, false), verify ->type == PROCEDURE
pass ->parameters to procedure_statement_2?

procedure_statement_2
	→ LPAREN expression_list RPAREN
	→ EPSILON
pass ->parameters to expression_list?

expression_list
	→ expression expression_list_2
check type of expression against corresponding parameter
pass ->parameters to expression_list_2?

expression_list_2
	→ COMMA expression expression_list_2
	→ EPSILON
check type of expression against corresponding parameter
pass ->parameters to expression_list_2?

expression
	→ simple_expression expression_2
pass type of simple_expression to expression_2?
return type of parse_expression_2()

expression_2
	→ RELOP simple_expression
	→ EPSILON
epsilon: retrurn type of passed in expression
RELOP: check that types of both simple_expressions match? Return boolean or error

simple_expression
	→ term simple_expression_2
	→ sign term simple_expression_2
if sign, check that term is int or real
pass type of term to simple_expression_2

simple_expression_2
	→ ADDOP term simple_expression_2
	→ PLUS term simple_expression_2
	→ MINUS term simple_expression_2
	→ EPSILON
convert PLUS and MINUS into a proper ADDOP at this point?
check that type of both terms agree with the ADDOP, "or" requires bool, others numbers
pass type of term to simple_expression_2

term
	→ factor term_2
pass type of factor to term_2

term_2
	→ MULOP factor term_2
	→ EPSILON
MULLOP "and" requires bool
pass type of factor to term_2

factor
	→ ID factor_2
	→ NUM
	→ LPAREN expression RPAREN
	→ NOT factor
if ID, check that it exists, and get its type, pass to factor_2
NOT requires bool

factor_2
	→ LBRACKET expression RBRACKET
	→ EPSILON
if LBRACKET, check that type of id is ARRAY_INT or ARRAY_REAL
check that expression is int?
return computed type

sign
	→ PLUS
	→ MINUS

