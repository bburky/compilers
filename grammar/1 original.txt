program
	→ PROGRAM ID ( identifier_list ) ; declarations subprogram_declarations compound_statement .

identifier_list
	→ id
	→ identifier_list , id

declarations
	→ declarations VAR identifier_list : type ;
	→ ε

type
	→ standard_type
	→ ARRAY [ NUM .. NUM ] OF standard_type

standard_type
	→ INTEGER
	→ REAL

subprogram_declarations
	→ subprogram_declarations subprogram_declaration ;
	→ ε

subprogram_declaration
	→ subprogram_head declarations subprogram_declarations compound_statement

subprogram_head
	→ PROCEDURE ID arguments ;

arguments
	→ ε
	→ ( parameter_list )

parameter_list
	→ identifier_list : type
	→ parameter_list ; identifier_list : type

compound_statement
	→ BEGIN optional_statements END

optional_statements
	→ statement_list
	→ ε

statement_list
	→ statement
	→ statement_list ; statement

statement
	→ variable ASSIGNOP expression
	→ procedure_statement
	→ compound_statement
	→ IF expression THEN statement ELSE statement
	→ IF expression THEN statement
	→ WHILE expression DO statement

variable
	→ ID
	→ ID [ expression ]

procedure_statement
	→ CALL ID
	→ CALL ID ( expression_list )

expression_list
	→ expression
	→ expression_list , expression

expression
	→ simple_expression
	→ simple_expression RELOP simple_expression

simple_expression
	→ term
	→ sign term
	→ simple_expression ADDOP term

term
	→ factor
	→ term MULOP factor

factor
	→ ID
	→ ID [ expression ]
	→ NUM
	→ ( expression )
	→ NOT factor

sign
	→ +
	→ -
